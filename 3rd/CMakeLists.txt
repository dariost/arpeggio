cmake_minimum_required(VERSION 3.0.2)

set(IFLAGS ${IFLAGS})
set(IDEFS ${IDEFS})
if(CMAKE_COMPILER_IS_GNUCC)
    set(IFLAGS ${IFLAGS} -O3)
    if((CMAKE_SYSTEM_NAME STREQUAL "Linux") AND (NOT DEBUG))
        set(IFLAGS ${IFLAGS} -flto)
    endif()
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    set(IDEFS ${IDEFS} _CRT_NONSTDC_NO_WARNINGS _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS_GLOBALS)
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    include_external_msproject(SDL-UWP SDL2-2.0.4/VisualC-WinRT/UWP_VS2015/SDL-UWP.vcxproj)
	set(SDL2_INCLUDES 3rd/SDL2-2.0.4/include PARENT_SCOPE)
    set(SDL2_INCLUDES SDL2-2.0.4/include)
	include_external_msproject(angle_common angle/winrt/10/src/angle_common.vcxproj)
	include_external_msproject(angle_image_util angle/winrt/10/src/angle_image_util.vcxproj)
	include_external_msproject(commit_id angle/winrt/10/src/commit_id.vcxproj)
	include_external_msproject(copy_compiler_dll angle/winrt/10/src/copy_compiler_dll.vcxproj)
	include_external_msproject(copy_scripts angle/winrt/10/src/copy_scripts.vcxproj)
	include_external_msproject(libANGLE angle/winrt/10/src/libANGLE.vcxproj angle_common angle_image_util commit_id copy_compiler_dll copy_scripts translator_static translator_lib translator preprocessor)
	include_external_msproject(libEGL angle/winrt/10/src/libEGL.vcxproj libANGLE)
	include_external_msproject(libGLESv2 angle/winrt/10/src/libGLESv2.vcxproj libANGLE)
	include_external_msproject(preprocessor angle/winrt/10/src/preprocessor.vcxproj)
	include_external_msproject(translator angle/winrt/10/src/translator.vcxproj)
	include_external_msproject(translator_lib angle/winrt/10/src/translator_lib.vcxproj)
	include_external_msproject(translator_static angle/winrt/10/src/translator_static.vcxproj)
	set(angle_INCLUDES 3rd/angle/include PARENT_SCOPE)
	set(angle_INCLUDES angle/include)
else()
    set(SDL_SHARED_ENABLED_BY_DEFAULT OFF CACHE BOOL "Build static SDL2")
    option(DIRECTX "Disable DirectX" OFF)
    option(RENDER_D3D "Disable Direct3D" OFF)
    if(USE_GLEW)
        option(VIDEO_OPENGLES "Disable OpenGL ES if using glew" OFF)
        option(VIDEO_WAYLAND "Disable Wayland if using glew" OFF)
        option(VIDEO_MIR "Disable Mir if using glew" OFF)
    endif()
    add_subdirectory(SDL2-2.0.4)
    set(SDL2_INCLUDES ${SDL2_SOURCE_DIR}/include PARENT_SCOPE)
    set(SDL2_INCLUDES ${SDL2_SOURCE_DIR}/include)
endif()

project(SDL2_mixer)
file(REMOVE SDL2_mixer-2.0.1/playmus.c)
file(REMOVE SDL2_mixer-2.0.1/playwave.c)
set(VB SDL2_mixer-2.0.1/external/libvorbis-1.3.3/lib)
set(VB_SOURCES ${VB}/mdct.c ${VB}/smallft.c ${VB}/block.c ${VB}/envelope.c ${VB}/window.c ${VB}/lsp.c ${VB}/lpc.c ${VB}/analysis.c ${VB}/synthesis.c ${VB}/psy.c ${VB}/info.c ${VB}/floor1.c ${VB}/floor0.c ${VB}/res0.c ${VB}/mapping0.c ${VB}/registry.c ${VB}/codebook.c ${VB}/sharedbook.c ${VB}/lookup.c ${VB}/bitrate.c ${VB}/vorbisfile.c)
file(GLOB SDL2_mixer_SOURCES SDL2_mixer-2.0.1/*.c SDL2_mixer-2.0.1/external/libogg-1.3.1/src/*.c ${VB_SOURCES})
add_library(SDL2_mixer STATIC ${SDL2_mixer_SOURCES})
target_include_directories(SDL2_mixer PRIVATE ${SDL2_INCLUDES} SDL2_mixer-2.0.1/external/libogg-1.3.1/include SDL2_mixer-2.0.1/external/libvorbis-1.3.3/include)
target_compile_definitions(SDL2_mixer PRIVATE OGG_MUSIC ${IDEFS})
target_compile_options(SDL2_mixer PRIVATE ${IFLAGS})
set(SDL2_mixer_INCLUDES ${SDL2_mixer_SOURCE_DIR}/SDL2_mixer-2.0.1 PARENT_SCOPE)

project(SDL2_image)
file(REMOVE SDL2_image-2.0.1/external/libpng-1.6.2/pngtest.c)
file(REMOVE SDL2_image-2.0.1/external/libpng-1.6.2/example.c)
file(REMOVE SDL2_image-2.0.1/showimage.c)
file(GLOB SDL2_image_SOURCES SDL2_image-2.0.1/*.c SDL2_image-2.0.1/external/libpng-1.6.2/*.c SDL2_image-2.0.1/external/zlib-1.2.8/*.c SDL2_image-2.0.1/external/libwebp-0.3.0/src/dec/*.c SDL2_image-2.0.1/external/libwebp-0.3.0/src/demux/*.c SDL2_image-2.0.1/external/libwebp-0.3.0/src/dsp/*.c SDL2_image-2.0.1/external/libwebp-0.3.0/src/mux/*.c SDL2_image-2.0.1/external/libwebp-0.3.0/src/utils/*.c) # SDL2_image-2.0.1/external/libwebp-0.3.0/src/enc/*.c
add_library(SDL2_image STATIC ${SDL2_image_SOURCES})
target_include_directories(SDL2_image PRIVATE ${SDL2_INCLUDES} SDL2_image-2.0.1/external/libwebp-0.3.0/src SDL2_image-2.0.1/external/libpng-1.6.2 SDL2_image-2.0.1/external/zlib-1.2.8)
target_compile_definitions(SDL2_image PRIVATE ${IDEFS} LOAD_WEBP LOAD_BMP LOAD_GIF LOAD_LBM LOAD_PCX LOAD_PNM LOAD_TGA LOAD_XCF LOAD_XPM LOAD_XV LOAD_PNG)
target_compile_options(SDL2_image PRIVATE ${IFLAGS})
set(SDL2_image_INCLUDES ${SDL2_image_SOURCE_DIR}/SDL2_image-2.0.1 PARENT_SCOPE)

project(json)
set(JSON_INCLUDES ${json_SOURCE_DIR}/json-2.0.1 PARENT_SCOPE)

project(hashlib2plus)
file(GLOB hashlib2plus_SOURCES ${hashlib2plus_SOURCE_DIR}/hashlib2plus-0.3.4/src/*.cpp)
add_library(hashlib2plus STATIC ${hashlib2plus_SOURCES})
target_compile_options(hashlib2plus PRIVATE ${IFLAGS})
target_compile_definitions(hashlib2plus PRIVATE ${IDEFS})
set(hashlib2plus_INCLUDES ${bz2_SOURCE_DIR}/hashlib2plus-0.3.4/src PARENT_SCOPE)

set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build static freetype")
option(WITH_HarfBuzz "Disable OpenType" OFF)
option(WITH_BZip2 "Disable BZip2" OFF)
add_subdirectory(freetype-2.7)
set(freetype_INCLUDES ${freetype_SOURCE_DIR}/include PARENT_SCOPE)
set(freetype_INCLUDES ${freetype_SOURCE_DIR}/include)

project(SDL2_ttf)
file(REMOVE SDL2_ttf-2.0.14/showfont.c)
file(REMOVE SDL2_ttf-2.0.14/glfont.c)
file(GLOB SDL2_ttf_SOURCES SDL2_ttf-2.0.14/*.c)
add_library(SDL2_ttf STATIC ${SDL2_ttf_SOURCES})
target_include_directories(SDL2_ttf PRIVATE ${SDL2_INCLUDES} ${freetype_INCLUDES})
target_compile_options(SDL2_ttf PRIVATE ${IFLAGS})
target_compile_definitions(SDL2_ttf PRIVATE ${IDEFS})
set(SDL2_ttf_INCLUDES ${SDL2_ttf_SOURCE_DIR}/SDL2_ttf-2.0.14 PARENT_SCOPE)

project(duktape)
file(GLOB duktape_SOURCES duktape-1.5.1/src/*.c)
add_library(duktape STATIC ${duktape_SOURCES})
target_compile_options(duktape PRIVATE ${IFLAGS})
target_compile_definitions(duktape PRIVATE ${IDEFS})
set(duktape_INCLUDES ${duktape_SOURCE_DIR}/duktape-1.5.1/src PARENT_SCOPE)

if(USE_GLEW)
    project(glew)
    file(GLOB glew_SOURCES glew-2.0.0/src/glew.c)
    add_library(glew STATIC ${glew_SOURCES})
    set(GLEW_LOCAL_INCLUDES ${GLEW_LOCAL_INCLUDES} glew-2.0.0/include)
    if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
        set(GLEW_LOCAL_INCLUDES ${GLEW_LOCAL_INCLUDES} /usr/local/include)
    endif()
    target_include_directories(glew PRIVATE ${GLEW_LOCAL_INCLUDES})
    target_compile_definitions(glew PRIVATE GLEW_NO_GLU GLEW_BUILD ${IDEFS})
    target_compile_options(glew PRIVATE ${IFLAGS})
    set(glew_INCLUDES ${glew_SOURCE_DIR}/glew-2.0.0/include PARENT_SCOPE)
endif()
