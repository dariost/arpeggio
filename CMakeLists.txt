cmake_minimum_required(VERSION 3.0.2)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake-modules/")

include(CheckCXXCompilerFlag)

project(arpeggio)

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    file(COPY ${CMAKE_SOURCE_DIR}/3rd/SDL2-2.0.4 DESTINATION ${CMAKE_BINARY_DIR})
	file(COPY ${CMAKE_SOURCE_DIR}/3rd/angle DESTINATION ${CMAKE_BINARY_DIR})
endif()

option(DEBUG "Debug build" ON)
if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
	option(USE_GLEW "Use OpenGL" OFF)
elseif(WIN32 OR (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD") OR (CMAKE_SYSTEM_NAME STREQUAL "Haiku"))
    option(USE_GLEW "Use OpenGL" ON)
else()
    option(USE_GLEW "Use OpenGL" OFF)
endif()

message(STATUS "Building on: ${CMAKE_SYSTEM_NAME}")

if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
  set(CMAKE_REQUIRED_INCLUDES "/usr/local/include" "/usr/include")
endif()

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
	file(GLOB SOURCES ${CMAKE_SOURCE_DIR}/src/*.cpp ${CMAKE_SOURCE_DIR}/3rd/SDL2-2.0.4/src/main/winrt/*)
else()
	file(GLOB SOURCES ${CMAKE_SOURCE_DIR}/src/*.cpp)
endif()

if(DEBUG AND (NOT MSVC))
    set(LIBS ${LIBS} -g)
    set(FLAGS ${FLAGS} -g)
endif()

add_subdirectory(3rd)

if(NOT (USE_GLEW OR EMSCRIPTEN))
	if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
		set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${angle_INCLUDES})
	else()
		find_package(GLES REQUIRED)
		set(LIBS ${LIBS} ${GLES_LIBRARIES})
	endif()
endif()

if(USE_GLEW)
    set(LIBS ${LIBS} glew)
endif()
if(NOT (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore"))
    set(LIBS ${LIBS} SDL2-static SDL2main)
endif()
set(LIBS ${LIBS} SDL2_image)
set(LIBS ${LIBS} SDL2_mixer)
set(LIBS ${LIBS} SDL2_ttf)
set(LIBS ${LIBS} freetype)
set(LIBS ${LIBS} hashlib2plus)
set(LIBS ${LIBS} duktape)
if(USE_GLEW)
    if(WIN32)
    	set(LIBS ${LIBS} glu32 opengl32 gdi32 user32 kernel32)
    else()
        set(LIBS ${LIBS} -L/usr/local/lib GL GLU)
    endif()
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "Haiku")
    set(LIBS ${LIBS} be game media device)
endif()
if(ANDROID)
    set(LIBS ${LIBS} log android)
endif()

if(USE_GLEW)
    set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${glew_INCLUDES})
endif()
if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} "/usr/local/include")
endif()
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${SDL2_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${JSON_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${SDL2_image_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${SDL2_mixer_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${SDL2_ttf_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${hashlib2plus_INCLUDES})
set(GLOBAL_INCLUDES ${GLOBAL_INCLUDES} ${duktape_INCLUDES})

if(MINGW)
    if(DEBUG)
    set(LIBS ${LIBS} -mconsole)
    else()
    set(LIBS ${LIBS} -mwindows)
    endif()
endif()

if(UNIX)
    set(LIBS ${LIBS} -Wl,-O1,--sort-common,--as-needed,-z,relro)
    if((CMAKE_SYSTEM_NAME STREQUAL "Linux") AND (NOT DEBUG))
        set(FLAGS ${FLAGS} -flto)
        set(LIBS ${LIBS} -flto)
    endif()
endif()

if(CMAKE_COMPILER_IS_GNUCXX AND (NOT ANDROID))
    set(LIBS ${LIBS} -static-libstdc++)
endif()

if(NOT MSVC)
    CHECK_CXX_COMPILER_FLAG("-std=gnu++14" COMPILER_SUPPORTS_GNUXX14)

    if(COMPILER_SUPPORTS_GNUXX14)
        set(FLAGS ${FLAGS} -std=gnu++14)
    else()
        set(FLAGS ${FLAGS} -std=gnu++1y)
    endif()

    set(FLAGS ${FLAGS} -Wall -Wextra -Werror -O3)

    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        set(FLAGS ${FLAGS} -Wno-missing-braces)
    endif()
endif()

add_executable(arpeggio ${SOURCES})

if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
	add_dependencies(arpeggio SDL-UWP)
	add_dependencies(arpeggio libEGL)
	add_dependencies(arpeggio libGLESv2)
	set(DEFS ${DEFS} _CRT_NONSTDC_NO_WARNINGS _CRT_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS_GLOBALS GL_GLEXT_PROTOTYPES UWP)
	set(FLAGS ${FLAGS} /ZW)
	set_target_properties(arpeggio PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:windows")
	set_target_properties(arpeggio PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:windows")
elseif(MSVC AND (NOT DEBUG))
    set_target_properties(arpeggio PROPERTIES LINK_FLAGS_RELEASE "/SUBSYSTEM:windows")
	set_target_properties(arpeggio PROPERTIES LINK_FLAGS_DEBUG "/SUBSYSTEM:windows")
endif()

target_include_directories(arpeggio PRIVATE ${GLOBAL_INCLUDES})

target_link_libraries(arpeggio PRIVATE ${LIBS})

target_compile_options(arpeggio PRIVATE ${FLAGS})

if(DEBUG)
    set(DEFS ${DEFS} ARPEGGIO_DEBUG)
endif()

if((NOT USE_GLEW) OR EMSCRIPTEN)
    set(DEFS ${DEFS} ARPEGGIO_GLES)
endif()

if(MINGW)
    set(DEFS ${DEFS} SDL_MAIN_HANDLED)
endif()

if(ANDROID)
    set(DEFS ${DEFS} JSON_ANDROID_WORKAROUNDS)
endif()

target_compile_definitions(arpeggio PRIVATE ${DEFS})
